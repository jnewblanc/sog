''' creature Class '''

import logging
import pprint

from common.storage import Storage
from common.attributes import AttributeHelper


'''
4.5 Monster parameters
    Monsters, aka non-player characters (NPCs), had many parameters.
        A key parameter was PE (permanent);
        monsters from random encounters had PE=false,
        and eventually got erased if a room has no players,
        while permanent monsters got saved to disk. If a player attacks it,
        key parameters included HI (hit points) and LVL (level).

    The monster parameters were typically grouped into basic,
        primary, and secondary parameters.

4.5.1 Basic
    EXP= : Experience, range 0..64000, default 100. Experience points awarded
        to the killers of the monsters. When there were multiple attackers,
        attackers all receive a fair fraction of this, and the individual
        who kills the monster receives a bonus.
    HI= : Hits (hit points), range 0..1023, default 10. Monsters with a less
        than 40% of their maximum (MH) may flee.
    LVL= : Level, range 0..64, default 1.
    MH= : Maximum hit points, range 0..1023. Monsters with RE=true will
        regenerate hit points HI up to this number.
    NA= : Name.
    PAR= : Parley, range 0..39, default 0. Defines how the monster reacts
        to the TALK and PARLEY commands.
    PE= : Permanent, true/false, default true when set by DM (default false
        if generated by a random encounter). If PE=false, monster may be
        deleted some time after there is no player in the room. If PE=true,
        after there is no player in the room, eventually it will have its
        hit points set to maximum.
    TR= : Treasure type, default 0 (no treasure). Identifies which treasure
        index (the treasure index had a list of up to 6 possibilities).
    Parley settings included:
        0 : No reaction
        1 : Sell object (from treasure list)
        2 : Negative reaction
        3 : Positive reaction
        10: Teleport player to one of the rooms in 30-300.

    4.5.3 Secondary
        SP= : Spell casting, true/false, default false. Can cast these
            spells: poison, fireball, lightning, or befuddle.
        UN= : Undead, true/false, default false. Vulnerable to TURN command
            (clerics can use this).
        RU= : Rust, true/false, default false. Weakens player armor or primary
            weapon (deducts strikes or hits)

    4.5.4 Experience
        There were various guidelines for setting the EXP value. The suggested
        guideline was to set the experience point value as:

        EXP = HP + Table(level) + bonus

        Where Table(level) converts the monster level to experience as follows:

        Level	Experience
        1        10
        2        20
        3        30
        4        40
        5        50
        6        90
        7        200
        8        300
        9        1000
        10       2000
        11 or more  3000

        The recommended bonus is based on the number of:

        Primary attributes (PAs): Block, follow, guard, fastreact, moralreact,
            flee, undead, rust, steal
        Secondary attributes (SAs): Magic, Antimagic, spellcasting, invisible,
            regenerate, level drain, poison, kidnap
        Monster level	Bonus
        1-5        (PA + 2 * SA) * (HP / 10)
        6-8        (PA + 2 * SA) * (HP / 10) * 2
        9 or more  (PA + 2 * SA) * (HP / 10) * 6

'''
creatureList = {
    '0': {
        'name': '',
        'AC': 10,
        'attackSpeed': 0,
        'frequency': 0,
        'hits': 10,
        'level': 1,
        'longdesc': '',
        'maxhits': 10,
        'pluraldesc': '',
        'singledesc': '',
        'value': 0,             # NOT NEEDED?
        'weight': 5,            # Not NEEDed?
        'objDropList': [],
        'attackPlayer': '',     # Who the creature is currently attacking
        'defendCreature': '',   # Which creatures it will defend
        'defendCreature': '',   # Which creatures it calls for help
        'hostile': False,
        'permanent': True,
        'defend': False,        # Wont attack back if attacked
        'blockFromLeaving': True,  # 50% stop attacking player frm leaving room
        'follow': True,         # chance to follow if player leaves room
        'guardTreasure': True,  # can't pick up treasure with creature in room
        'sendToJail': True,     # if attacked, player loses weapon & is jailed
        'attackLastAttacker': True,  # If false, attack first attacker
        'hidden': True,         # Can't see monster until engaged
        'invisible': True,      # Can’t see monster, “to hit” has 20% penalty
        'regenerate': True,          # Regenerates hit points during attack
        'drain': True,               # Chance to drain level (50% of the time)
        'poison': True,              # On hit, may poison player
        'antiMagic': True,           # immune to spells
        'undead': True,              # can be turned by clerics and paladins
        'TimeToFirstAttack': 10,     # of seconds to wait before hostile attack
        'attackIfPietyLessThan': 7,  # 0=ignore
        'attackIfPietyMoreThan': 7,  # 0=ignore
        'fleeIfAttacked': True,      # chance to run away when attacked
        'kidnap': False,  # Instead of death, teleport to room 7. Kidnapping
                          # monster will be placed in the room connected to
                          # the door in room 7.
        'callsForAssitance': True,
        'spellCaster': True,        # can cast spells
        'magic': True,              # immune to attacks from non-magic weapons
        'summonHelp': True,
        'cursed': False,
        'rust': False,              # causes armor to rust and lose extra hits
        'unique': False,
        'watch': True,
        'nice': True,
        'noKill': False             # players can't attack if set
    },
}


class Creature(Storage, AttributeHelper):
    creatureSpellList = ['poison', 'fireball', 'lightning', 'befuddle']
    attributesThatShouldntBeSaved = []

    def __init__(self, id=0):
        self._name = ""
        self._creatureID = id
        logging.debug("Creature __init__" + self._creatureID)

        return(None)

    def debug(self):
        return(pprint.pformat(vars(self)))

    def delete(self):
        return(None)

    def getId(self):
        return(self._creatureId)

    def getName(self):
        return(self._name)

    def fixAttributes(self):
        ''' Sometimes we change attributes, and need to fix them in rooms
            that are saved.  This method lets us do that.  Typically this
            involves casting types or removing obsolete vars, but we could
            also use this for copying values from one attribute to another '''
        # integer attributes
        intAtt = []
        # boolean attributes
        boolAtt = []
        # obsolete attributes (to be removed)
        obsoleteAtt = []

        for attName in intAtt:
            try:
                newVal = int(getattr(self, attName, 0))
            except ValueError:
                newVal = 0
            setattr(self, attName, newVal)
        for attName in boolAtt:
            try:
                newVal = bool(getattr(self, attName, False))
            except ValueError:
                newVal = False
            setattr(self, attName, newVal)
        for attName in obsoleteAtt:
            try:
                delattr(self, attName)
            except AttributeError:
                pass
